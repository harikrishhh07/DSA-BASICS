#include <stdio.h>
#include <stdlib.h>

struct node {
    int data;
    struct node* link;
};

void push(struct node** top) {
    struct node* newnode = (struct node*)malloc(sizeof(struct node));
    if (newnode == NULL) {
        printf("Stack Overflow (Memory not allocated)\n");
        return;
    }
    printf("Enter the data: ");
    scanf("%d", &newnode->data);
    newnode->link = *top;
    *top = newnode;
    printf("%d pushed successfully!\n", newnode->data);
}

void pop(struct node** top) {
    if (*top == NULL) {
        printf("Stack Underflow!\n");
        return;
    }
    struct node* temp = *top;
    printf("%d popped successfully!\n", temp->data);
    *top = (*top)->link;
    free(temp);
}

void peek(struct node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
    } else {
        printf("Top element is: %d\n", top->data);
    }
}

void display(struct node* top) {
    if (top == NULL) {
        printf("Stack is empty!\n");
        return;
    }
    printf("Stack elements: ");
    while (top != NULL) {
        printf("%d ", top->data);
        top = top->link;
    }
    printf("\n");
}

int main() {
    struct node* top = NULL;
    int choice;

    while (1) {
        printf("\n--- Stack Menu (Linked List) ---\n");
        printf("1. Push\n");
        printf("2. Pop\n");
        printf("3. Peek\n");
        printf("4. Display\n");
        printf("5. Exit\n");
        printf("Enter your choice: ");
        scanf("%d", &choice);

        switch (choice) {
            case 1:
                push(&top);
                break;
            case 2:
                pop(&top);
                break;
            case 3:
                peek(top);
                break;
            case 4:
                display(top);
                break;
            case 5:
                return 0;
            default:
                printf("Invalid choice! Try again.\n");
        }
    }
}
